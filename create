#/************************************************************************************
#***
#***	Copyright 2019 Dell(18588220928@163.com), All Rights Reserved.
#***
#***	File Author: Dell, 2019-12-13 21:53:28
#***
#************************************************************************************/
#
#! /bin/sh

GLOBAL_DIR=`dirname $0`
GLOBAL_PRG=`basename $0`


usage()
{
    echo "Usage: $GLOBAL_PRG [options]"
    echo "Semi-Auto-Programming: Create programs files with commands"
    echo ""
    echo "options:"
    echo "    --c [busybox | sandbox | cudabox | mpibox | opencv | hfile | cfile]"
    echo "                                      Create C files"
    echo "    --bash [busybox | forever | ccbs | while]"
    echo "                                      Create bash script"
    echo "    --golang"
    echo "                                      Create golang files"
    echo "    --python [pytorch]"
    echo "                                      Create python files"
    echo "    --makefile [app | lib | dir]"
    echo "                                      Create makefile for C/C++ program"
    exit 1
}

get_project_name()
{
	read -p "Project Name: " project_name
	if [ "$project_name" == "" ] ; then
		project_name=`basename $PWD`
	fi
	echo $project_name
}

check_empty_dir()
{
	files=`ls`
	if [ -n "$files" ] ; then
		echo "Creating will overwrite files, DO IT UNDER EMPTY DIRECTORY !!!"
		exit 1
	fi
}

create_c_files()
{
	case $args in
	# busybox
	busy*)
		c_busybox
		;;
	# sandbox
	sand*)
		echo "NOT implement"
		;;
	# cudabox
	cuda*)
		echo "NOT implement"
		;;
	# mpibox
	mpi*)
		echo "NOT implement"
		;;
	# opencv
	open*)
		echo "NOT implement"
		;;
	# hfile
	hfile)
		echo "NOT implement"
		;;
	# cfile
	cfile)
		echo "NOT implement"
		;;
	*)
		usage
		;;
	esac
}

create_bash_files()
{
	case $args in
	# busybox
	busy*)
		create_view -f ${GLOBAL_DIR}/template/bash/busybox
		;;
	# forever
	for*)
		create_view -f ${GLOBAL_DIR}/template/bash/forever
		;;
	ccbs*)
		create_view -f ${GLOBAL_DIR}/template/bash/ccbs
		;;
	while*)
		create_view -f ${GLOBAL_DIR}/template/bash/while
		;;
	*)
		usage
		;;
	esac
}

create_go_files()
{
	args="$*"

	case $args in 
	*)
		usage
		;;
	esac
}

create_py_files()
{
	args="$*"

	case $args in
	# pytorch
	*torch)
		pytorch_project
		;;
	# keras
	*keras)
		echo "NOT implement"
		;;
	*)
		usage
		;;
	esac
}

create_make_files()
{
	args="$*"

	case $args in 
	*app)
		echo "NOT implement"
		;;
	*lib)
		echo "NOT implement"
		;;
	*dir)
		echo "NOT implement"
		;;
	*)
		usage
		;;
	esac
}


pytorch_project()
{
	TEMPLATE_DIR=${GLOBAL_DIR}/template/pytorch_project

	check_empty_dir
	project_name=`get_project_name`
	echo "Creating pytorch_project project '${project_name}' ..."

	create_view -f $TEMPLATE_DIR/data.py -v $project_name > data.py
	create_view -f $TEMPLATE_DIR/model.py -v $project_name > model.py
	create_view -f $TEMPLATE_DIR/train.py -v $project_name > train.py
	create_view -f $TEMPLATE_DIR/test.py -v $project_name > test.py
	create_view -f $TEMPLATE_DIR/predict.py -v $project_name > predict.py
	create_view -f $TEMPLATE_DIR/readme.md -v $project_name > readme.md
}

c_busybox()
{
	check_empty_dir
	echo "Create busybox for C language."
}

golang()
{
	check_empty_dir
	project_name=`get_project_name`
	echo "Create golang project '${project_name}' ..."
}

[ "$*" == "" -o "$1" == "-h" -o "$1" == "-help" -o "$1" == "--help" ] && usage

language=$1
shift
args="$*"

case $language in
# --c
*-c)
    create_c_files "$args"
    ;;
# --bash
*-bash)
    create_bash_files "$args"
    ;;
# --golang
*-go*)
    create_go_files "$args"
    ;;
# --python
*-py*)
    create_py_files "$args"
    ;;
# --makefile
*-make*)
    create_make_files "$args"
    ;;
*)
    usage
    ;;
esac



