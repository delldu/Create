syntax = "proto3";

package tensor;

message HelloRequest {
	string name = 1;
}

message HelloReply {
	string message = 1;
}

// Tensor Size NxCxHxW
message TensorSize {
	int32 N = 1;
	int32 C = 2;
	int32 H = 3;
	int32 W = 4;
}

// Get Tensor Size
message GetSizeRequest {
	string id = 1;
}

message GetSizeReply {
	TensorSize size = 1;
}

// Tensor NxCxHxW
message Tensor {
	Tensor size = 1;
	bytes data = 2;
}

// Set Tensor
message SetRequest {
	string id = 1;
	Tensor tensor = 2;
}

message SetReply {
	string message = 1;	
}

// Get Tensor
message GetRequest {
	string id = 1;
}

message GetReply {
	Tensor tensor = 1;
}

// Delete Tensor message
message DelRequest {
	string id = 1;
}

message DelReply {
	string message = 1;	
}

// Add tensor
message PushRequest {
	string id = 1;
	Tensor tensor = 2;
}

message PushReply {
	string message = 1;
}

// Delete tensor slice
message PopRequest {
	string id = 1;
}

message PopReply {
	string message = 1;
}

// Image clean
message ImageCleanRequest {
	string method = 1;	// deepc | bm3d: auto/sigma | guide: auto/sigma | gauss: auto/sigma | sharp: auto/sigma
	string id = 2;		// input tensor id
}

message ImageCleanReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message: method=deepc, noise level=30 ...
}

// Image color
message ImageColorRequest {
	string method = 1;	// GAN ...
	string id = 2;		// input tensor id
	string rid = 3;		// reference color id, reference is 2d tensor with column (row, col, r, g, b)
}

message ImageColorReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message, method=...
}

// Image zoom
message ImageZoomRequest {
	string method = 1;	// esgan 2x, 4x ...
	string id = 2;		// input tensor id
}

message ImageZoomReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message, method=...
}

// Image patch
message ImagePatchRequest {
	string method = 1;	// PConv ...
	string id = 2;		// input tensor id
	string mid = 3;		// mask tensor id
}

message ImagePatchReply {
	string input = 1;	// oid tensor id
	string message = 2;	// OK or Error message, method=...
}

// Video clean
message VideoCleanRequest {
	string method = 1;	// fastdvd
	string id = 2;		// input tensor id
}

message VideoCleanReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message, method=..., noise level = 30 ...
}

// Video color
message VideoColorRequest {
	string method = 1;	// ...
	string id = 2;		// input tensor id
	string rid = 3;		// reference color tensors id, Nx3xHxW format
}

message VideoColorReply {
	string oid = 1;			// output tensor id
	string message = 2;		// OK or Error message, method=...
}

// Video zoom
message VideoZoomRequest {
	string method = 1;		// Zoom 2x, 4x ...
	string id = 2;			// input tensor id
}

message VideoZoomReply {
	string oid = 1;			// output tensor id
	string message = 2;		// OK or Error message, method=..., scale = 4x
}

// Video slow
message VideoSlowRequest {
	string method = 1;	// Super Slomo ...
	string id = 2;		// input tensor id
}

message VideoSlowReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message, method=..., scale = 2x
}

// Tensor Service
service TensorService {
	// Ping, Say Hello
	rpc Hello(HelloRequest) returns (HelloReply);

	// Get tensor size
	rpc GetSize(GetSizeRequest) returns (GetSizeReply);

	// Get/Set/Del tensor
	rpc Get(GetRequest) returns (GetReply);
	rpc Set(SetRequest) returns (SetReply);
	rpc Del(DelRequest) returns (DelReply);

	// Add tensor
	rpc LPush(PushRequest) returns (PushReply);
	rpc RPush(PushRequest) returns (PushReply);

	// Delete tensor slice
	rpc LPop(PopRequest) returns (PopReply);
	rpc RPop(PopRequest) returns (PopReply);

	// Image applications
	rpc ImageClean(ImageCleanRequest) returns (ImageCleanReply);
	rpc ImageColor(ImageColorRequest) returns (ImageColorReply);
	rpc ImageZoom(ImageZoomRequest) returns (ImageZoomReply);
	rpc ImagePatch(ImagePatchRequest) returns (ImagePatchReply);

	// Video applications
	rpc VideoClean(VideoCleanRequest) returns (VideoCleanReply);
	rpc VideoColor(VideoColorRequest) returns (VideoColorReply);
	rpc VideoZoom(VideoZoomRequest) returns (VideoZoomReply);
	rpc VideoSlow(VideoSlowRequest) returns (VideoSlowReply);
}

