syntax = "proto3";

package tensor;

message HelloRequest {
	string name = 1;
}

message HelloReply {
	string message = 1;
}

// Tensor NxCxHxW
message Tensor {
	int32 N = 1;
	int32 C = 2;
	int32 H = 3;
	int32 W = 4;
	bytes data = 5;
}

// Set Tensor
message SetTensorRequest {
	string id = 1;
	Tensor tensor = 2;
}

message SetTensorReply {
	string message = 1;		// Expect message == set id
}

// Get Tensor
message GetTensorRequest {
	string id = 1;
}

message GetTensorReply {
	Tensor tensor = 1;
	string message = 2;		// Expect message == id from Tensor Buffer
}

// Delete Tensor message
message DelTensorRequest {
	string id = 1;
}

message DelTensorReply {
	string message = 1;		// Exect message == Delete id
}

// Image clean
message ImageCleanRequest {
	string method = 1;	// deepc | bm3d: auto/sigma | guide: auto/sigma | gauss: auto/sigma | sharp: auto/sigma
	string id = 2;		// input tensor id
}

message ImageCleanReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message: method=deepc, noise level=30 ...
}

// Image color
message ImageColorRequest {
	string method = 1;	// GAN ...
	string id = 2;		// input tensor id
	string rid = 3;		// reference color id, reference is 2d tensor with column (row, col, r, g, b)
}

message ImageColorReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message, method=...
}

// Image zoom
message ImageZoomRequest {
	string method = 1;	// esgan 2x, 4x ...
	string id = 2;		// input tensor id
}

message ImageZoomReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message, method=...
}

// Image patch
message ImagePatchRequest {
	string method = 1;	// PConv ...
	string id = 2;		// input tensor id
	string mid = 3;		// mask tensor id
}

message ImagePatchReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message, method=...
}

// Video clean
message VideoCleanRequest {
	string method = 1;	// fastdvd
	string id = 2;		// input tensor id
}

message VideoCleanReply {
	string oid = 1;		// output tensor id or id list
	string message = 2;	// OK or Error message, method=..., noise level = 30 ...
}

// Video color
message VideoColorRequest {
	string method = 1;	// ...
	string id = 2;		// input tensor id
	string rid = 3;		// reference color tensors id, Nx3xHxW format
}

message VideoColorReply {
	string oid = 1;			// output tensor id
	string message = 2;		// OK or Error message, method=...
}

// Video zoom
message VideoZoomRequest {
	string method = 1;		// Zoom 2x, 4x ...
	string id = 2;			// input tensor id
}

message VideoZoomReply {
	string oid = 1;			// output tensor id
	string message = 2;		// OK or Error message, method=..., scale = 4x
}

// Video slow
message VideoSlowRequest {
	string method = 1;	// Super Slomo ...
	string id = 2;		// input tensor id
}

message VideoSlowReply {
	string oid = 1;		// output tensor id
	string message = 2;	// OK or Error message, method=..., scale = 2x
}

// Tensor Service
service TensorService {
	// Ping, Say Hello
	rpc Hello(HelloRequest) returns (HelloReply);

	// Get/Set/Del tensor
	rpc GetTensor(GetTensorRequest) returns (GetTensorReply);
	rpc SetTensor(SetTensorRequest) returns (SetTensorReply);
	rpc DelTensor(DelTensorRequest) returns (DelTensorReply);
}

// Image applications
service ImageCleanService {
	rpc ImageClean(ImageCleanRequest) returns (ImageCleanReply);
}

service ImageColorService {
	rpc ImageColor(ImageColorRequest) returns (ImageColorReply);
}

service ImageZoomService {
	rpc ImageZoom(ImageZoomRequest) returns (ImageZoomReply);
}

service ImagePatchService {
	rpc ImagePatch(ImagePatchRequest) returns (ImagePatchReply);
}

// Video applications
service VideoCleanService {
	rpc VideoClean(VideoCleanRequest) returns (VideoCleanReply);
}

service VideoColorService {
	rpc VideoColor(VideoColorRequest) returns (VideoColorReply);
}

service VideoZoomService {
	rpc VideoZoom(VideoZoomRequest) returns (VideoZoomReply);
}

service VideoSlowService {
	rpc VideoSlow(VideoSlowRequest) returns (VideoSlowReply);
}
