syntax = "proto3";

package imageclean;


// service image clean
message CleanRequest {
	string id = 1;
	string method = 2;
}

message CleanReply {
	string message = 1;
}

service ImageCleanService {
	rpc StartClean(CleanRequest) returns (CleanReply)
}







message TensorTransformRequest {
	string method = 1;
	repeated Tensor inputs = 2;
}


message TensorTransformReply {
	repeated Tensor outputs = 2;
}


service TensorTransform {
// Image	
	rpc Image_Clean(TensorTransformRequest) returns (TensorTransformReply)

	rpc Image_Sharp(TensorTransformRequest) returns (TensorTransformReply)
	
	rpc Image_Color(TensorTransformRequest) returns (TensorTransformReply)
	
	rpc Image_Zoom(TensorTransformRequest) returns (TensorTransformReply)

	rpc Image_Patch(TensorTransformRequest) returns (TensorTransformReply)

// Video
	rpc Video_Clean(TensorTransformRequest) returns (TensorTransformReply)
	rpc Video_Color(TensorTransformRequest) returns (TensorTransformReply)
	rpc Video_Zoom(TensorTransformRequest) returns (TensorTransformReply)
	rpc Video_Slow(TensorTransformRequest) returns (TensorTransformReply)
}



// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

syntax = "proto3";

package keyvaluestore;

// A simple key-value storage service
service KeyValueStore {
  // Provides a value for each key request
  rpc GetValues (stream Request) returns (stream Response) {}
}

// The request message containing the key
message Request {
  string key = 1;
}

// The response message containing the value associated with the key
message Response {
  string value = 1;
}

